<!DOCTYPE html>
<html>
  <head>
    <title>{{titleName}}</title>
    <meta charset="utf-8" />
    <meta http-equiv="content-type" content="text/html;charset=utf-8"/>
    <meta name="viewport" content="width=device-width">
    <link rel="stylesheet" href="css/l.geosearch.css" />
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" />
    <!--[if lte IE 8]>
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.ie.css" />
    <![endif]-->

    <script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
    <script src="js/topojson.v1.min.js"></script>
    <script type="text/javascript" src="js/chroma.min.js"></script>
    <script src="js/l.control.geosearch.js"></script>
    <script src="js/l.geosearch.provider.google.js"></script>
    <script src="js/d3.v3.min.js"></script>
    <script src="js/colorbrewer.js"></script>
    <style>
    select {
        font-size: 24px;
    }
      html, body {
      height: 100%;
      }

      
      body {
margin: 0px;
padding: 0px;
height: 100%;
}

      .social-buttons {
          display:block;
          list-style:none;
          padding:0px;
          margin:4px 0 0 0px;
          float:right;
      }

      li {
          margin-top:5px;
      }

      #content {
         margin-right: auto;
         margin-left: auto;
         height: 100%;
      }

      #map {
         height: 100%;
      }

      .info {
          padding: 6px 8px;
          font: 14px/16px Arial, Helvetica, sans-serif;
          background: white;
          background: rgba(255,255,255,0.8);
          box-shadow: 0 0 15px rgba(0,0,0,0.2);
          border-radius: 9px;
      }
      .info h4 {
          margin: 0 0 0px;
          color: #333;
      }

      .info div{margin:0 0 5px;}


      body.hom_rate .info div.hom,
      body.hom_count .info div.hom,
      body.rncv_rate .info div.rncv,
      body.rncv_count .info div.rncv,
      body.rvcv_rate .info div.rvcv,
      body.rvcv_count .info div.rvcv,
      body.rvsv_rate .info div.rvsv,
      body.rvsv_count .info div.rvsv {
          //background:#F6E493;
          //color:#000;
          //border-radius: 3px;
      }
.legend {
    line-height: 18px;
    color: #555;
}
.legend i {
    width: 18px;
    height: 18px;
    float: left;
    margin-right: 8px;
    opacity: 0.7;
}
    </style>
  </head>
  <body class="{{varName}}">
    <div id="content" class="container">
      <div id="map"></div> <!-- <ul class='social-buttons'> -->
    </div>
    <!--   <li style="margin:10px 0px 10px 0"> -->
        
    <!--   </li> -->
    <!--   <li> -->
    <!--     <div id='fb-root'></div> -->
    <!--     <div class='fb-like' data-colorscheme='light' data-layout='box_count' data-show-faces='false' data-width='40' href='http://www.diegovalle.net/mordor'></div> -->
    <!--   </li> -->
    <!-- </ul> -->
    <script type="text/javascript">
      //The map
    var mxc;

//return a color scale for the choropleths
var createScale = function(colors, domain, numcol){
    return chroma.scale(colors).domain(domain, numcol);
};
var createScale = function(colors, domain, numcol){
    return d3.scale.quantize()
           .domain(domain)
           .range(d3.range(numcol).map(function(i) { return colors[i] }));
}
//for formatting the population data
comma = d3.format("0,000");

var scaleHomicide,
scaleRNCV,
scaleRVCV,
scaleRVSV;
var colorFun;
var currentName = "hom" + '{{type}}';
var lastSelect = "Homicides";

//remember this is a mustache template
var scaleFun;
var varName = "{{varName}}";
var title = "{{titleName}}";

//use the appropiate scale from the template
var getColor;

var nokiaStreets = L.tileLayer('http://{s}.{base}.maps.cit.api.here.com/maptile/2.1/maptile/{mapID}/normal.night/{z}/{x}/{y}/256/png8?app_id={app_id}&app_code={app_code}', {
    attribution: 'Map &copy; 1987-2014 <a href="http://developer.here.com">HERE</a>',
    subdomains: '1234',
    mapID: 'newest',
    app_id: '6nA3IVXYrizzTDgFJMIN',
    app_code: '6o4Vvdk1QIkytF-bmyH_Yg',
    base: 'base',
    minZoom: 0,
    maxZoom: 20
});
var nokiaSat = L.tileLayer('http://{s}.{base}.maps.cit.api.here.com/maptile/2.1/maptile/{mapID}/satellite.day/{z}/{x}/{y}/256/png8?app_id={app_id}&app_code={app_code}', {
    attribution: 'Map &copy; 1987-2014 <a href="http://developer.here.com">HERE</a>',
    subdomains: '1234',
    mapID: 'newest',
    app_id: '6nA3IVXYrizzTDgFJMIN',
    app_code: '6o4Vvdk1QIkytF-bmyH_Yg',
    base: 'aerial',
    minZoom: 0,
    maxZoom: 20
});

// var nokiaStreets = L.tileLayer('http://{s}.maptile.maps.svc.ovi.com/maptiler/v2/maptile/newest/normal.night/{z}/{x}/{y}/256/png8', {
//     attribution: '©2012 Nokia <a href="http://here.net/services/terms" target="_blank">Terms of use</a>'
// }),
// nokiaSat = L.tileLayer('http://{s}.maptile.maps.svc.ovi.com/maptiler/v2/maptile/newest/satellite.day/{z}/{x}/{y}/256/png8', {
//     attribution: '©2012 Nokia <a href="http://here.net/services/terms" target="_blank">Terms of use</a>'
// })
var map = L.map('map', {center: new L.LatLng(19.38, -99.1),
                        zoom: 11,
                        layers: [nokiaStreets]});

var baseMaps = {
    "Satellite": nokiaSat,
    "Streets": nokiaStreets
};





//add a geosearch control
// new L.Control.GeoSearch({
//  provider: new L.GeoSearch.Provider.Google()
// }).addTo(map);

// control that shows state info on hover
var info = L.control();
var legend = L.control({position: 'bottomright'});


info.onAdd = function (map) {
    this._div = L.DomUtil.create('div', 'info');
    this.update();
    //document.getElementById("seltarget").onmouseover = controlEnter;
    //document.getElementById("seltarget").onmouseout = controlLeave;  
    return this._div;
    };

legend.onAdd = function (map) {
    this._div = L.DomUtil.create('div', 'info legend');
    this.update();
    //document.getElementById("seltarget").onmouseover = controlEnter;
    //document.getElementById("seltarget").onmouseout = controlLeave;  
    return this._div;
};


legend.update = function(lastSelect){
    var div ="", color, round1, round2;
    //var r = colorFun.invertExtent(d);
    //     return d3.round(r[0], 0)
    //loop through our density intervals and generate a label with a colored square for each interval
    for (var i = 0; i < 9; i++) {
        switch($('#seltarget').attr('value')) {
        case "Homicide":
            color = colorbrewer.Reds["9"][i]
            break;
        case "Violent robberies to a business":
            color = colorbrewer.Blues["9"][i]
            break;
        case "Violent car robberies":
            color = colorbrewer.Purples["9"][i]
            break;
        case "Non-violent car robberies":
            color = colorbrewer.Greens["9"][i]
            break;
        }
        if('{{level}}' != "sectores") { 
            round1 = Math.ceil;
            round2 = Math.floor;
        }
        else {
            round1 = d3.round;
            round2 = d3.round;
            }
            

        div +=
        '<i style="background:' + (color) + '"></i> ' +
            round1(colorFun.invertExtent(color)[0], 1) +" - " +  
            round2(colorFun.invertExtent(color)[1], 1) +'<br>';
    }

    this._div.innerHTML = div; 
}

function controlEnter(e) {
    map.dragging.disable();
}
function controlLeave() {
    map.dragging.enable();
} 
   

info.update = function (props) {
    // don't leak
    $("#seltarget").remove();
    this._div.innerHTML = '<div id="variables" class="menu-ui"><select id="seltarget" autofocus><option value="Homicide">Homicide</option><option value="Violent robberies to a business">Violent robberies to a business</option><option value="Violent car robberies">Violent car robberies</option><option value="Non-violent car robberies">Non-violent car robberies</option></select></div><h1>'+title+'</h1>' + '<h3>' + 
        (props ? props.sector + ('{{level}}' === "sectores" ? "" : " / " + props.id) : 'DF (annualized rates Jan 13 - Mar 14)') +'</h3>' + '<div><h4>Total Population</h4>' +  (props ? '' + comma(props.population) : '8,785,874') +
        '</div><div class="hom"><h4>Homicides (<b>rate</b> / count)</h4><b>' +  (props ? '' + props.hom_rate : '10.1') + '</b> / '  +  (props ? comma(props.hom_count) : '1,114') +
        '</div><div class="rncv"><h4>Violent robberies to a business  (<b>rate</b> / count) </h4><b>' +  (props ? '' + props.rncv_rate : '46.5') + '</b> / '  +  (props ? comma(props.rncv_count) : '5,104') +
        '</div><div class="rvcv"><h4>Violent car robberies (<b>rate</b> / count) </h4><b>' +  (props ? '' + props.rvcv_rate  : '59.1') + '</b> / '  +  (props ? comma(props.rvcv_count) : '6,497') +
        '</div><div class="rvsv"><h4>Non-violent car robberies (<b>rate</b> / count) </h4><b>' +  (props ? props.rvsv_rate  : '135.1') + '</b> / '  +  (props ? comma(props.rvsv_count) : '14,842') +'</div>'
    $("#seltarget").val(lastSelect);
    $("#seltarget").change(function() {
        switch($(this).attr('value')) {
        case "Homicide":
            colorFun =  scaleHomicide;
            currentName ="hom" + '{{type}}';
            lastSelect = "Homicide";
            break;
        case "Violent robberies to a business":
            colorFun =  scaleRNCV;
            currentName = "rncv" + '{{type}}';
            lastSelect = "Violent robberies to a business";
            break;
        case "Violent car robberies":
            colorFun =  scaleRVCV;
            currentName = "rvcv" + '{{type}}';
            lastSelect = "Violent car robberies";
            break;
        case "Non-violent car robberies":
            colorFun =  scaleRVSV;
            currentName = "rvsv" + '{{type}}';
            lastSelect = "Non-violent car robberies";
            break;
        }
        legend.update(lastSelect);
        mxc.eachLayer(function(layer) {
            layer.setStyle({
                fillColor: colorFun(layer.feature.properties[currentName]),
                fillOpacity: 0.8,
                weight: 0.5
            });    
        });
    });
    if(document.getElementById("seltarget")) {
    document.getElementById("seltarget").onmouseover = controlEnter;
    document.getElementById("seltarget").onmouseout = controlLeave; 
 }

};

info.addTo(map);
L.control.layers(baseMaps).addTo(map);
document.getElementById("seltarget").onmouseover = controlEnter;
document.getElementById("seltarget").onmouseout = controlLeave; 

var getStyle = function(feature) {
    return {
        fillColor: colorFun(feature.properties[currentName]),
        weight: .5,
        opacity: 1,
        color: '#555',
        fillOpacity: 0.8
    };
    
};

function highlightFeature(e) {
    var layer = e.target;
    
    layer.setStyle({
        fillColor: 'transparent',
        weight: .6,
        color: '#555'
        
    });
    
    if (!L.Browser.ie && !L.Browser.opera) {
       layer.bringToFront();
    }
    
    info.update(layer.feature.properties);
}

function resetHighlight(e) {
    //mxc.resetStyle(e.target);
    e.target.setStyle({
	fillColor: colorFun(e.target.feature.properties[currentName]),
        fillOpacity: 0.8,
        weight: 0.5,
        color: '#555'
    });
    info.update();
}

function onEachFeature(feature, layer) {
    layer.on({
        mouseover: highlightFeature,
        mouseout: resetHighlight
    });
    
}




$.getJSON('js/{{level}}-map.json', function (data) {
    var mxcGeojson = topojson.feature(data, data.objects.{{level}}).features;
    
    var featureCollection = {
        "type": "FeatureCollection",
        "features": []
    };
    
    for (var i = 0; i <  mxcGeojson.length; i++) {
        featureCollection.features.push({
            "type":"Feature",
            "geometry":  mxcGeojson[i].geometry,
            "properties":  mxcGeojson[i].properties
        });
    }
    
    findRange=function(mxcGeojson, name) {
        return(d3.extent(d3.entries(mxcGeojson), function(d){return(+d.value.properties[name])} ));
    }
    //The scales for the various maps
    scaleHomicide = createScale(chroma.brewer.Reds,
                                findRange(mxcGeojson, 'hom' + '{{type}}'), 9),
    scaleRNCV = createScale(chroma.brewer.Blues, 
                            findRange(mxcGeojson, 'rncv' + '{{type}}'), 9),
    scaleRVCV = createScale(chroma.brewer.Purples, 
                            findRange(mxcGeojson, 'rvcv' + '{{type}}'), 9),
    scaleRVSV = createScale(chroma.brewer.Greens, 
                            findRange(mxcGeojson, 'rvsv' + '{{type}}'), 9);
    getColor = function(value) {
        return scaleFun(value);
    };
    scaleFun = {{scaleFun}};
    colorFun = scaleFun;
    
    // mxcLayer.addData(featureCollection);
    
    mxc = L.geoJson(featureCollection, {
        style: getStyle,
        onEachFeature: onEachFeature
    }).addTo(map);
    info.update();
    legend.addTo(map);
});





// var $select = $('<select></select>')
//     .appendTo($('#variables'))
//     .on('change', function() {
//         setVariable($(this).val());
//     });
// var variables = [
//     'B06011002 - Born in state of residence',
//     'B06011003 - Born in other state of the United States',
//     'B06011004 - Native; born outside the United States'];
// for (var i = 0; i < variables.length; i++) {
//     //ranges[variables[i]] = { min: Infinity, max: -Infinity };
//     // Simultaneously, build the UI for selecting different
//     // ranges
//     $('<option></option>')
//         .text(variables[i])
//         .attr('value', variables[i])
//         .appendTo($select);
// }
</script>
    
   
    <script id="deferedjs" type="text/javascript">
    var _gaq=[['_setAccount','UA-100264-1'],['_trackPageview']]; // Change UA-XXXXX-X to be your site's ID
    (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];g.async=1;
      g.src=('https:'==location.protocol?'//ssl':'//www')+'.google-analytics.com/ga.js';
      s.parentNode.insertBefore(g,s)}(document,'script'));
    _gaq.push(['_setSiteSpeedSampleRate', 5]);  //Measure Page Speed

    </script>

    <!--[if lt IE 9 ]>
    <script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.2/CFInstall.min.js"></script>
    <script>window.attachEvent("onload",function(){CFInstall.check({mode:"overlay"})})</script>
    <![endif]-->
</body>
</html>
